// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Last Price
	// (GET /api/last_price/{symbol1}/{symbol2})
	GetApiLastPriceSymbol1Symbol2(ctx echo.Context, symbol1 string, symbol2 string) error
	// Retrieve Ticker Information
	// (GET /api/ticker/{symbol1}/{symbol2})
	GetApiTickerSymbol1Symbol2(ctx echo.Context, symbol1 string, symbol2 string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiLastPriceSymbol1Symbol2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiLastPriceSymbol1Symbol2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "symbol1" -------------
	var symbol1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol1", runtime.ParamLocationPath, ctx.Param("symbol1"), &symbol1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol1: %s", err))
	}

	// ------------- Path parameter "symbol2" -------------
	var symbol2 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol2", runtime.ParamLocationPath, ctx.Param("symbol2"), &symbol2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol2: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiLastPriceSymbol1Symbol2(ctx, symbol1, symbol2)
	return err
}

// GetApiTickerSymbol1Symbol2 converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiTickerSymbol1Symbol2(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "symbol1" -------------
	var symbol1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol1", runtime.ParamLocationPath, ctx.Param("symbol1"), &symbol1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol1: %s", err))
	}

	// ------------- Path parameter "symbol2" -------------
	var symbol2 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "symbol2", runtime.ParamLocationPath, ctx.Param("symbol2"), &symbol2)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter symbol2: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiTickerSymbol1Symbol2(ctx, symbol1, symbol2)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/last_price/:symbol1/:symbol2", wrapper.GetApiLastPriceSymbol1Symbol2)
	router.GET(baseURL+"/api/ticker/:symbol1/:symbol2", wrapper.GetApiTickerSymbol1Symbol2)

}
